		   MWS - MULTIHOP WIRELESS SIMULATOR

		http://lcavwww.epfl.ch/~henridf/mws.html

**             
** PREREQUISITES
**             

To compile and run mws, you must have ocaml installed. The latest version of
ocaml (3.07+2) is recommended. The official site to get ocaml is 
http://caml.inria.fr. 


In order to build and use the gui functionality, you must also install
lablgtk. Lablgtk is available from XXXX.


**             
** DOCUMENTATION
**             

The html documentation and a tutorial are located under doc/ and can be 
browsed starting from doc/index.html.

More detailed documentation of the internals can be generated from the 
source code with the ocamldoc tool - see COMPILING below.

For pointers on getting started in ocaml, please see the documentation 
in mws/doc/index.html

**             
** SOURCE LAYOUT                                              
**             

  mws/               -> simulator core
  mws/interfaces/    -> core class and module interfaces
  mws/base/          -> implementation of core functions
  mws/pkt/           -> packet representations and related functions
  mws/mob/           -> mobility and related functions
  mws/mac/           -> mac layers and related functions

  proto/             -> protocol agents
  proto/ler          -> last encounter routing (EASE/GREASE)
  proto/aodv         -> AODV
  proto/grep         -> GREP

  gui/               -> GUI-related code
				       
  lib/               -> Helper libs 
  lib/contrib        -> Helper libs from external sources (GPL-level licenses)

  doc		     -> Documentation (see above)


**
** COMPILING
**

To generate code documentation: (will be rooted at doc/gen/index.html)
[Note: don't worry about warnings when building doc!]

	make htmldoc

To compile an interactive mws toplevel:

	make mws-top

To compile an interactive mws toplevel with gui support linked in:
(requires lablgtk, see PREREQUISITES above)

	make mwsviz-top

To compile mws to run script foo.ml in batch mode:
(foo.ml is assumed to be in the scripts/ directory)

	make SCRIPT=foo.ml mws

If foo.ml uses gui libraries:

	make SCRIPT=foo.ml mwsviz

To compile as native code (runs faster), pass OPT=y flag to make, as in

	make OPT=y SCRIPT=foo.ml mwsviz
	or	
	make OPT=y SCRIPT=foo.ml mwsgui

Note: interactive toplevels cannot be compiled to native code.

